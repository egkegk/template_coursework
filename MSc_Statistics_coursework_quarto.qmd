---
title: "Coursework Template"
subtitle: 'MSc in Statistics 2025/26, Imperial College London'
author: "Emrys King (CID 06059238)"
format:
  html:
    toc: true
    highlight: tango
    self-contained: true
    df-print: paged
  pdf: default
format-links: false
bibliography: "MSc_Statistics_coursework_template_quarto.bib" 
---

```{r}
#| include: false
# the following css block is my attempt to switch the base font to EB Garamond and the headers' fonts to Radley. still a work in progress!
```


<style type="text/css">

/*-- scss:defaults --*/

@import url('https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&display=swap');
@import url('https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&family=Radley:ital@0;1&display=swap');

$font-family-serif: "EB Garamond", Radley, serif !default;
$font-family-heading: Radley;
$font-family-base: $font-family-serif;

/*-- scss:rules --*/

h1{
  font-size: 24pt;
  font-family: $font-family-heading;
}
h2{
  font-size: 18pt;
  font-family: $font-family-heading;
}
body{
  font-size: 12pt;
  font-family: "EB Garamond", serif !default;
}
</style>


```{r setup, include = FALSE, tidy=TRUE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  dev = "ragg_png"
)
include_solutions <- TRUE

```

```{r setup2, include=FALSE, tidy=TRUE}
require(rmarkdown)
require(knitr)
require(kableExtra)
# Put any library imports and other preamble here.
library(ggplot2)
library(dplyr)
```

This Rmarkdown document is intended to provide a basic template that you may use throughout the course, and to introduce you to basic functionality of the open-source bookdown R package for writing Rmarkdown documents [@xie2016bookdown].

Please note:

- Rmarkdown syntax for the title and document style;
- bookdown syntax to label and reference equations;
- bookdown syntax to referencing literate and provide a bib file;
- kable syntax to build clean and clear tables that can be referenced;
- Rmarkdown inline functions to collect and print all code used.

# Useful Code Block Modifications

Sometimes, you don't want code blocks to evaluate as normal. Here's how to fix that.

```{{r}}
#| warning: false (won't include warnings on render)
#| eval: false (won't evaluate code on render; useful for install.packages 
                  # or blocks that cause errors)
#| echo: false (will evaluate code but not show it on render)
#| results: hold (will print the results of a code block in one block,
                  # as opposed to splitting the code into several blocks)
```

Note: to print a code block 'verbatim,' like above, put an extra set of curly brackets around the code language declaration, like so: {{r}}.

# Loading Data

As an example in this file, we'll run a simple descriptive analysis of the `ChickWeight` dataset, which comes with `R`.

```{r}
chickens <- datasets::ChickWeight
```

# Some Sample Analysis

We can start by getting some measures of centrality. The block below will evaluate each line separately, displaying the result for each as separate blocks.

```{r}
mean(chickens$weight)
median(chickens$weight)
```

If we want one block of code followed by one block of results, we can use the `hold` option in the code block:

```{r}
#| results: hold
mean(chickens$weight)
median(chickens$weight)
```

Now, let's ask some questions from our data. Does the chicks' weight depend on their diet?

```{r}
chickens %>% ggplot(aes(x = Diet, y = weight)) +
  geom_boxplot() +
  theme_minimal()
```

Not a ton of difference between some levels, but could be significant! Let's check that the experiment was run properly: that there is the same number of chicks on each diet.

```{r}
table(chickens$Diet)
```

I don't love how that table looks, let's try a prettier one using `kable`.

```{r}
#| label: fig-diet-count
diet_table <- table(chickens$Diet)
knitr::kable(diet_table, col.names = c("Diet", "Count"))
```


Let's try a linear model.

```{r}
#linear model

fit <- lm(weight ~ Diet, data = chickens)
summary(fit)
```

Horrible $R^2$! Diet is not a good predictor of weight. Still, let's use `summary` with `kable` to get a prettier display.

```{r}
knitr::kable(round(summary(fit)$coefficients,2))
```

Much better! 

## Referencing Figures/Sources/Tables

Just for fun, let's look at some time series, and not print the code that generates it.

```{r echo=FALSE}
#| label: fig-time-series
#| fig-cap: "A scatterplot displaying the varying weights of each chick over time."
chickens %>% ggplot(aes(x = Time, y = weight)) +
  geom_point() +
  theme_minimal()
```

We can also reference the plot and a source like so: In @fig-time-series, the weight of the chicks increases over time. The variation of the chicks' weight also increases over time. This corresponds with the theory introduced @efron1987better. An interesting comparison can be made with @fig-diet-count.

## Referencing Equations

``` markdown
$$ e^{\pi i} + 1 = 0.$${#eq-euler}
```

$$ e^{\pi i} + 1 = 0.$${#eq-euler}

@eq-euler states an elegant and well known result. By convention, equations should only be numbered if they are mentioned in the main text.

```{r}
#| layout-ncol: 2
#| label: fig-example-plots
#| fig-cap: "Two example plots relating to the Gaussian distribution."
#| fig-subcap: 
#|   - "Gaussian distribution"
#|   - "Gaussian QQ-plot"

x <- seq(from = -3, to = 3,by = 0.01)
density <- dnorm(x, mean = 0, sd = 1)

plot(
  x = x,
  y = density,
  bty = "n",
  cex.axis = 1.4,
  cex.lab = 1.4,
  type = "l",
  lwd = 2)

y <- rnorm(n = 100, mean = 3, sd = 2)
qqnorm(y, cex.axis = 1.4, cex.lab = 1.4, main = "")
```

@fig-example-plots shows how we can create multiple plots within a code block and then have these appear within the same figure as sub-figures. A probability density function is shown in @fig-example-plots-1, while a quantile-quantile plot is shown in @fig-example-plots-2.



## What goes where? Tiles, Captions and Descriptions 


| Aspect          | Plot Title                      | Figure Caption                                      |
|-----------------|---------------------------------|-----------------------------------------------------|
| Location        | Inside or above the plot        | Outside the plot                                    |
| Purpose         | Quick context for the plot      | Formal description with interpretive context        |
| Referencing     | Rarely referenced in the text   | Commonly referenced (e.g., “see Figure 1”)          |

Where a figure or table is mentioned in the main text you should explain _how_ it supports any claims that you are making. 

> BAD: @fig-penguin-scatter demonstrates Simpson's paradox.

> GOOD: @fig-penguin-scatter shows that while there appears to be a positive association between bill length and depth _within_ each species, this association disappears or perhaps reverses when considering all species together. This is an example of Simpson's paradox [simpson1951contingency].

## Useful Resources 

- Imperial Coursework Report Template
- [Quarto documentation](https://quarto.org/docs/guide/)
- [Make a reprex, please](https://youtu.be/G5Nm-GpmrLw?si=-GkQa9hK1yWiW37-)
- Telling Stories With Data 
  - [3 - Reproducilbe workflows](https://tellingstorieswithdata.com/03-workflow.html)
- R style guides [Google](https://google.github.io/styleguide/Rguide.html), [Tidyverse](https://style.tidyverse.org/).

- Effective Data Science
  - [1 - Organising your work](https://eds-notes.zakvarty.com/101-workflows-organising-your-work)
  - [8 - Exploratory data analysis](https://eds-notes.zakvarty.com/302-edav-analysis)
  - [9 - Data visualisation](https://eds-notes.zakvarty.com/303-edav-visualisation)
- [The TidyTuesday Cookbook](https://nrennie.rbind.io/art-of-viz/) 


# Code appendix

Rather than re-paste all the code to the appendix, here is a trick which makes the markdown file output all the code (without) execution in the appendix, without any duplication.

Please keep in mind to format the code so that the entire code is clearly visible and does not run into the margins of the pdf version.  

```{r ref.label=knitr::all_labels(), echo = T, eval = F}
```

# References
